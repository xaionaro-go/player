// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: player.proto

#include "player.pb.h"
#include "player.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace player {

static const char* Player_method_names[] = {
  "/player.Player/Open",
  "/player.Player/SetupForStreaming",
  "/player.Player/ProcessTitle",
  "/player.Player/GetLink",
  "/player.Player/EndChan",
  "/player.Player/IsEnded",
  "/player.Player/GetPosition",
  "/player.Player/GetLength",
  "/player.Player/GetSpeed",
  "/player.Player/SetSpeed",
  "/player.Player/GetPause",
  "/player.Player/SetPause",
  "/player.Player/Seek",
  "/player.Player/GetVideoTracks",
  "/player.Player/GetAudioTracks",
  "/player.Player/GetSubtitlesTracks",
  "/player.Player/SetVideoTrack",
  "/player.Player/SetAudioTrack",
  "/player.Player/SetSubtitlesTrack",
  "/player.Player/Stop",
  "/player.Player/Close",
};

std::unique_ptr< Player::Stub> Player::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Player::Stub> stub(new Player::Stub(channel, options));
  return stub;
}

Player::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Open_(Player_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetupForStreaming_(Player_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ProcessTitle_(Player_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLink_(Player_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EndChan_(Player_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_IsEnded_(Player_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPosition_(Player_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLength_(Player_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSpeed_(Player_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetSpeed_(Player_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPause_(Player_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetPause_(Player_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Seek_(Player_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetVideoTracks_(Player_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAudioTracks_(Player_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSubtitlesTracks_(Player_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetVideoTrack_(Player_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetAudioTrack_(Player_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetSubtitlesTrack_(Player_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Stop_(Player_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Close_(Player_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Player::Stub::Open(::grpc::ClientContext* context, const ::player::OpenRequest& request, ::player::OpenReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::player::OpenRequest, ::player::OpenReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Open_, context, request, response);
}

void Player::Stub::async::Open(::grpc::ClientContext* context, const ::player::OpenRequest* request, ::player::OpenReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::player::OpenRequest, ::player::OpenReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Open_, context, request, response, std::move(f));
}

void Player::Stub::async::Open(::grpc::ClientContext* context, const ::player::OpenRequest* request, ::player::OpenReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Open_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::player::OpenReply>* Player::Stub::PrepareAsyncOpenRaw(::grpc::ClientContext* context, const ::player::OpenRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::player::OpenReply, ::player::OpenRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Open_, context, request);
}

::grpc::ClientAsyncResponseReader< ::player::OpenReply>* Player::Stub::AsyncOpenRaw(::grpc::ClientContext* context, const ::player::OpenRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOpenRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Player::Stub::SetupForStreaming(::grpc::ClientContext* context, const ::player::SetupForStreamingRequest& request, ::player::SetupForStreamingReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::player::SetupForStreamingRequest, ::player::SetupForStreamingReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetupForStreaming_, context, request, response);
}

void Player::Stub::async::SetupForStreaming(::grpc::ClientContext* context, const ::player::SetupForStreamingRequest* request, ::player::SetupForStreamingReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::player::SetupForStreamingRequest, ::player::SetupForStreamingReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetupForStreaming_, context, request, response, std::move(f));
}

void Player::Stub::async::SetupForStreaming(::grpc::ClientContext* context, const ::player::SetupForStreamingRequest* request, ::player::SetupForStreamingReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetupForStreaming_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::player::SetupForStreamingReply>* Player::Stub::PrepareAsyncSetupForStreamingRaw(::grpc::ClientContext* context, const ::player::SetupForStreamingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::player::SetupForStreamingReply, ::player::SetupForStreamingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetupForStreaming_, context, request);
}

::grpc::ClientAsyncResponseReader< ::player::SetupForStreamingReply>* Player::Stub::AsyncSetupForStreamingRaw(::grpc::ClientContext* context, const ::player::SetupForStreamingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetupForStreamingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Player::Stub::ProcessTitle(::grpc::ClientContext* context, const ::player::ProcessTitleRequest& request, ::player::ProcessTitleReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::player::ProcessTitleRequest, ::player::ProcessTitleReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ProcessTitle_, context, request, response);
}

void Player::Stub::async::ProcessTitle(::grpc::ClientContext* context, const ::player::ProcessTitleRequest* request, ::player::ProcessTitleReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::player::ProcessTitleRequest, ::player::ProcessTitleReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProcessTitle_, context, request, response, std::move(f));
}

void Player::Stub::async::ProcessTitle(::grpc::ClientContext* context, const ::player::ProcessTitleRequest* request, ::player::ProcessTitleReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProcessTitle_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::player::ProcessTitleReply>* Player::Stub::PrepareAsyncProcessTitleRaw(::grpc::ClientContext* context, const ::player::ProcessTitleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::player::ProcessTitleReply, ::player::ProcessTitleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ProcessTitle_, context, request);
}

::grpc::ClientAsyncResponseReader< ::player::ProcessTitleReply>* Player::Stub::AsyncProcessTitleRaw(::grpc::ClientContext* context, const ::player::ProcessTitleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncProcessTitleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Player::Stub::GetLink(::grpc::ClientContext* context, const ::player::GetLinkRequest& request, ::player::GetLinkReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::player::GetLinkRequest, ::player::GetLinkReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetLink_, context, request, response);
}

void Player::Stub::async::GetLink(::grpc::ClientContext* context, const ::player::GetLinkRequest* request, ::player::GetLinkReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::player::GetLinkRequest, ::player::GetLinkReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLink_, context, request, response, std::move(f));
}

void Player::Stub::async::GetLink(::grpc::ClientContext* context, const ::player::GetLinkRequest* request, ::player::GetLinkReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLink_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::player::GetLinkReply>* Player::Stub::PrepareAsyncGetLinkRaw(::grpc::ClientContext* context, const ::player::GetLinkRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::player::GetLinkReply, ::player::GetLinkRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetLink_, context, request);
}

::grpc::ClientAsyncResponseReader< ::player::GetLinkReply>* Player::Stub::AsyncGetLinkRaw(::grpc::ClientContext* context, const ::player::GetLinkRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetLinkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::player::EndChanReply>* Player::Stub::EndChanRaw(::grpc::ClientContext* context, const ::player::EndChanRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::player::EndChanReply>::Create(channel_.get(), rpcmethod_EndChan_, context, request);
}

void Player::Stub::async::EndChan(::grpc::ClientContext* context, const ::player::EndChanRequest* request, ::grpc::ClientReadReactor< ::player::EndChanReply>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::player::EndChanReply>::Create(stub_->channel_.get(), stub_->rpcmethod_EndChan_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::player::EndChanReply>* Player::Stub::AsyncEndChanRaw(::grpc::ClientContext* context, const ::player::EndChanRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::player::EndChanReply>::Create(channel_.get(), cq, rpcmethod_EndChan_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::player::EndChanReply>* Player::Stub::PrepareAsyncEndChanRaw(::grpc::ClientContext* context, const ::player::EndChanRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::player::EndChanReply>::Create(channel_.get(), cq, rpcmethod_EndChan_, context, request, false, nullptr);
}

::grpc::Status Player::Stub::IsEnded(::grpc::ClientContext* context, const ::player::IsEndedRequest& request, ::player::IsEndedReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::player::IsEndedRequest, ::player::IsEndedReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IsEnded_, context, request, response);
}

void Player::Stub::async::IsEnded(::grpc::ClientContext* context, const ::player::IsEndedRequest* request, ::player::IsEndedReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::player::IsEndedRequest, ::player::IsEndedReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsEnded_, context, request, response, std::move(f));
}

void Player::Stub::async::IsEnded(::grpc::ClientContext* context, const ::player::IsEndedRequest* request, ::player::IsEndedReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsEnded_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::player::IsEndedReply>* Player::Stub::PrepareAsyncIsEndedRaw(::grpc::ClientContext* context, const ::player::IsEndedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::player::IsEndedReply, ::player::IsEndedRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IsEnded_, context, request);
}

::grpc::ClientAsyncResponseReader< ::player::IsEndedReply>* Player::Stub::AsyncIsEndedRaw(::grpc::ClientContext* context, const ::player::IsEndedRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIsEndedRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Player::Stub::GetPosition(::grpc::ClientContext* context, const ::player::GetPositionRequest& request, ::player::GetPositionReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::player::GetPositionRequest, ::player::GetPositionReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPosition_, context, request, response);
}

void Player::Stub::async::GetPosition(::grpc::ClientContext* context, const ::player::GetPositionRequest* request, ::player::GetPositionReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::player::GetPositionRequest, ::player::GetPositionReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPosition_, context, request, response, std::move(f));
}

void Player::Stub::async::GetPosition(::grpc::ClientContext* context, const ::player::GetPositionRequest* request, ::player::GetPositionReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPosition_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::player::GetPositionReply>* Player::Stub::PrepareAsyncGetPositionRaw(::grpc::ClientContext* context, const ::player::GetPositionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::player::GetPositionReply, ::player::GetPositionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPosition_, context, request);
}

::grpc::ClientAsyncResponseReader< ::player::GetPositionReply>* Player::Stub::AsyncGetPositionRaw(::grpc::ClientContext* context, const ::player::GetPositionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPositionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Player::Stub::GetLength(::grpc::ClientContext* context, const ::player::GetLengthRequest& request, ::player::GetLengthReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::player::GetLengthRequest, ::player::GetLengthReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetLength_, context, request, response);
}

void Player::Stub::async::GetLength(::grpc::ClientContext* context, const ::player::GetLengthRequest* request, ::player::GetLengthReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::player::GetLengthRequest, ::player::GetLengthReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLength_, context, request, response, std::move(f));
}

void Player::Stub::async::GetLength(::grpc::ClientContext* context, const ::player::GetLengthRequest* request, ::player::GetLengthReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLength_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::player::GetLengthReply>* Player::Stub::PrepareAsyncGetLengthRaw(::grpc::ClientContext* context, const ::player::GetLengthRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::player::GetLengthReply, ::player::GetLengthRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetLength_, context, request);
}

::grpc::ClientAsyncResponseReader< ::player::GetLengthReply>* Player::Stub::AsyncGetLengthRaw(::grpc::ClientContext* context, const ::player::GetLengthRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetLengthRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Player::Stub::GetSpeed(::grpc::ClientContext* context, const ::player::GetSpeedRequest& request, ::player::GetSpeedReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::player::GetSpeedRequest, ::player::GetSpeedReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSpeed_, context, request, response);
}

void Player::Stub::async::GetSpeed(::grpc::ClientContext* context, const ::player::GetSpeedRequest* request, ::player::GetSpeedReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::player::GetSpeedRequest, ::player::GetSpeedReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSpeed_, context, request, response, std::move(f));
}

void Player::Stub::async::GetSpeed(::grpc::ClientContext* context, const ::player::GetSpeedRequest* request, ::player::GetSpeedReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSpeed_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::player::GetSpeedReply>* Player::Stub::PrepareAsyncGetSpeedRaw(::grpc::ClientContext* context, const ::player::GetSpeedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::player::GetSpeedReply, ::player::GetSpeedRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSpeed_, context, request);
}

::grpc::ClientAsyncResponseReader< ::player::GetSpeedReply>* Player::Stub::AsyncGetSpeedRaw(::grpc::ClientContext* context, const ::player::GetSpeedRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSpeedRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Player::Stub::SetSpeed(::grpc::ClientContext* context, const ::player::SetSpeedRequest& request, ::player::SetSpeedReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::player::SetSpeedRequest, ::player::SetSpeedReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetSpeed_, context, request, response);
}

void Player::Stub::async::SetSpeed(::grpc::ClientContext* context, const ::player::SetSpeedRequest* request, ::player::SetSpeedReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::player::SetSpeedRequest, ::player::SetSpeedReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSpeed_, context, request, response, std::move(f));
}

void Player::Stub::async::SetSpeed(::grpc::ClientContext* context, const ::player::SetSpeedRequest* request, ::player::SetSpeedReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSpeed_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::player::SetSpeedReply>* Player::Stub::PrepareAsyncSetSpeedRaw(::grpc::ClientContext* context, const ::player::SetSpeedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::player::SetSpeedReply, ::player::SetSpeedRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetSpeed_, context, request);
}

::grpc::ClientAsyncResponseReader< ::player::SetSpeedReply>* Player::Stub::AsyncSetSpeedRaw(::grpc::ClientContext* context, const ::player::SetSpeedRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetSpeedRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Player::Stub::GetPause(::grpc::ClientContext* context, const ::player::GetPauseRequest& request, ::player::GetPauseReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::player::GetPauseRequest, ::player::GetPauseReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPause_, context, request, response);
}

void Player::Stub::async::GetPause(::grpc::ClientContext* context, const ::player::GetPauseRequest* request, ::player::GetPauseReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::player::GetPauseRequest, ::player::GetPauseReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPause_, context, request, response, std::move(f));
}

void Player::Stub::async::GetPause(::grpc::ClientContext* context, const ::player::GetPauseRequest* request, ::player::GetPauseReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPause_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::player::GetPauseReply>* Player::Stub::PrepareAsyncGetPauseRaw(::grpc::ClientContext* context, const ::player::GetPauseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::player::GetPauseReply, ::player::GetPauseRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPause_, context, request);
}

::grpc::ClientAsyncResponseReader< ::player::GetPauseReply>* Player::Stub::AsyncGetPauseRaw(::grpc::ClientContext* context, const ::player::GetPauseRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPauseRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Player::Stub::SetPause(::grpc::ClientContext* context, const ::player::SetPauseRequest& request, ::player::SetPauseReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::player::SetPauseRequest, ::player::SetPauseReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetPause_, context, request, response);
}

void Player::Stub::async::SetPause(::grpc::ClientContext* context, const ::player::SetPauseRequest* request, ::player::SetPauseReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::player::SetPauseRequest, ::player::SetPauseReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPause_, context, request, response, std::move(f));
}

void Player::Stub::async::SetPause(::grpc::ClientContext* context, const ::player::SetPauseRequest* request, ::player::SetPauseReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPause_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::player::SetPauseReply>* Player::Stub::PrepareAsyncSetPauseRaw(::grpc::ClientContext* context, const ::player::SetPauseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::player::SetPauseReply, ::player::SetPauseRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetPause_, context, request);
}

::grpc::ClientAsyncResponseReader< ::player::SetPauseReply>* Player::Stub::AsyncSetPauseRaw(::grpc::ClientContext* context, const ::player::SetPauseRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetPauseRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Player::Stub::Seek(::grpc::ClientContext* context, const ::player::SeekRequest& request, ::player::SeekReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::player::SeekRequest, ::player::SeekReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Seek_, context, request, response);
}

void Player::Stub::async::Seek(::grpc::ClientContext* context, const ::player::SeekRequest* request, ::player::SeekReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::player::SeekRequest, ::player::SeekReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Seek_, context, request, response, std::move(f));
}

void Player::Stub::async::Seek(::grpc::ClientContext* context, const ::player::SeekRequest* request, ::player::SeekReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Seek_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::player::SeekReply>* Player::Stub::PrepareAsyncSeekRaw(::grpc::ClientContext* context, const ::player::SeekRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::player::SeekReply, ::player::SeekRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Seek_, context, request);
}

::grpc::ClientAsyncResponseReader< ::player::SeekReply>* Player::Stub::AsyncSeekRaw(::grpc::ClientContext* context, const ::player::SeekRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSeekRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Player::Stub::GetVideoTracks(::grpc::ClientContext* context, const ::player::GetVideoTracksRequest& request, ::player::GetVideoTracksReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::player::GetVideoTracksRequest, ::player::GetVideoTracksReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetVideoTracks_, context, request, response);
}

void Player::Stub::async::GetVideoTracks(::grpc::ClientContext* context, const ::player::GetVideoTracksRequest* request, ::player::GetVideoTracksReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::player::GetVideoTracksRequest, ::player::GetVideoTracksReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVideoTracks_, context, request, response, std::move(f));
}

void Player::Stub::async::GetVideoTracks(::grpc::ClientContext* context, const ::player::GetVideoTracksRequest* request, ::player::GetVideoTracksReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVideoTracks_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::player::GetVideoTracksReply>* Player::Stub::PrepareAsyncGetVideoTracksRaw(::grpc::ClientContext* context, const ::player::GetVideoTracksRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::player::GetVideoTracksReply, ::player::GetVideoTracksRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetVideoTracks_, context, request);
}

::grpc::ClientAsyncResponseReader< ::player::GetVideoTracksReply>* Player::Stub::AsyncGetVideoTracksRaw(::grpc::ClientContext* context, const ::player::GetVideoTracksRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetVideoTracksRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Player::Stub::GetAudioTracks(::grpc::ClientContext* context, const ::player::GetAudioTracksRequest& request, ::player::GetAudioTracksReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::player::GetAudioTracksRequest, ::player::GetAudioTracksReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAudioTracks_, context, request, response);
}

void Player::Stub::async::GetAudioTracks(::grpc::ClientContext* context, const ::player::GetAudioTracksRequest* request, ::player::GetAudioTracksReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::player::GetAudioTracksRequest, ::player::GetAudioTracksReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAudioTracks_, context, request, response, std::move(f));
}

void Player::Stub::async::GetAudioTracks(::grpc::ClientContext* context, const ::player::GetAudioTracksRequest* request, ::player::GetAudioTracksReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAudioTracks_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::player::GetAudioTracksReply>* Player::Stub::PrepareAsyncGetAudioTracksRaw(::grpc::ClientContext* context, const ::player::GetAudioTracksRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::player::GetAudioTracksReply, ::player::GetAudioTracksRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAudioTracks_, context, request);
}

::grpc::ClientAsyncResponseReader< ::player::GetAudioTracksReply>* Player::Stub::AsyncGetAudioTracksRaw(::grpc::ClientContext* context, const ::player::GetAudioTracksRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAudioTracksRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Player::Stub::GetSubtitlesTracks(::grpc::ClientContext* context, const ::player::GetSubtitlesTracksRequest& request, ::player::GetSubtitlesTracksReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::player::GetSubtitlesTracksRequest, ::player::GetSubtitlesTracksReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSubtitlesTracks_, context, request, response);
}

void Player::Stub::async::GetSubtitlesTracks(::grpc::ClientContext* context, const ::player::GetSubtitlesTracksRequest* request, ::player::GetSubtitlesTracksReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::player::GetSubtitlesTracksRequest, ::player::GetSubtitlesTracksReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSubtitlesTracks_, context, request, response, std::move(f));
}

void Player::Stub::async::GetSubtitlesTracks(::grpc::ClientContext* context, const ::player::GetSubtitlesTracksRequest* request, ::player::GetSubtitlesTracksReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSubtitlesTracks_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::player::GetSubtitlesTracksReply>* Player::Stub::PrepareAsyncGetSubtitlesTracksRaw(::grpc::ClientContext* context, const ::player::GetSubtitlesTracksRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::player::GetSubtitlesTracksReply, ::player::GetSubtitlesTracksRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSubtitlesTracks_, context, request);
}

::grpc::ClientAsyncResponseReader< ::player::GetSubtitlesTracksReply>* Player::Stub::AsyncGetSubtitlesTracksRaw(::grpc::ClientContext* context, const ::player::GetSubtitlesTracksRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSubtitlesTracksRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Player::Stub::SetVideoTrack(::grpc::ClientContext* context, const ::player::SetVideoTrackRequest& request, ::player::SetVideoTrackReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::player::SetVideoTrackRequest, ::player::SetVideoTrackReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetVideoTrack_, context, request, response);
}

void Player::Stub::async::SetVideoTrack(::grpc::ClientContext* context, const ::player::SetVideoTrackRequest* request, ::player::SetVideoTrackReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::player::SetVideoTrackRequest, ::player::SetVideoTrackReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetVideoTrack_, context, request, response, std::move(f));
}

void Player::Stub::async::SetVideoTrack(::grpc::ClientContext* context, const ::player::SetVideoTrackRequest* request, ::player::SetVideoTrackReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetVideoTrack_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::player::SetVideoTrackReply>* Player::Stub::PrepareAsyncSetVideoTrackRaw(::grpc::ClientContext* context, const ::player::SetVideoTrackRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::player::SetVideoTrackReply, ::player::SetVideoTrackRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetVideoTrack_, context, request);
}

::grpc::ClientAsyncResponseReader< ::player::SetVideoTrackReply>* Player::Stub::AsyncSetVideoTrackRaw(::grpc::ClientContext* context, const ::player::SetVideoTrackRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetVideoTrackRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Player::Stub::SetAudioTrack(::grpc::ClientContext* context, const ::player::SetAudioTrackRequest& request, ::player::SetAudioTrackReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::player::SetAudioTrackRequest, ::player::SetAudioTrackReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetAudioTrack_, context, request, response);
}

void Player::Stub::async::SetAudioTrack(::grpc::ClientContext* context, const ::player::SetAudioTrackRequest* request, ::player::SetAudioTrackReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::player::SetAudioTrackRequest, ::player::SetAudioTrackReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAudioTrack_, context, request, response, std::move(f));
}

void Player::Stub::async::SetAudioTrack(::grpc::ClientContext* context, const ::player::SetAudioTrackRequest* request, ::player::SetAudioTrackReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAudioTrack_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::player::SetAudioTrackReply>* Player::Stub::PrepareAsyncSetAudioTrackRaw(::grpc::ClientContext* context, const ::player::SetAudioTrackRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::player::SetAudioTrackReply, ::player::SetAudioTrackRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetAudioTrack_, context, request);
}

::grpc::ClientAsyncResponseReader< ::player::SetAudioTrackReply>* Player::Stub::AsyncSetAudioTrackRaw(::grpc::ClientContext* context, const ::player::SetAudioTrackRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetAudioTrackRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Player::Stub::SetSubtitlesTrack(::grpc::ClientContext* context, const ::player::SetSubtitlesTrackRequest& request, ::player::SetSubtitlesTrackReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::player::SetSubtitlesTrackRequest, ::player::SetSubtitlesTrackReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetSubtitlesTrack_, context, request, response);
}

void Player::Stub::async::SetSubtitlesTrack(::grpc::ClientContext* context, const ::player::SetSubtitlesTrackRequest* request, ::player::SetSubtitlesTrackReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::player::SetSubtitlesTrackRequest, ::player::SetSubtitlesTrackReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSubtitlesTrack_, context, request, response, std::move(f));
}

void Player::Stub::async::SetSubtitlesTrack(::grpc::ClientContext* context, const ::player::SetSubtitlesTrackRequest* request, ::player::SetSubtitlesTrackReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSubtitlesTrack_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::player::SetSubtitlesTrackReply>* Player::Stub::PrepareAsyncSetSubtitlesTrackRaw(::grpc::ClientContext* context, const ::player::SetSubtitlesTrackRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::player::SetSubtitlesTrackReply, ::player::SetSubtitlesTrackRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetSubtitlesTrack_, context, request);
}

::grpc::ClientAsyncResponseReader< ::player::SetSubtitlesTrackReply>* Player::Stub::AsyncSetSubtitlesTrackRaw(::grpc::ClientContext* context, const ::player::SetSubtitlesTrackRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetSubtitlesTrackRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Player::Stub::Stop(::grpc::ClientContext* context, const ::player::StopRequest& request, ::player::StopReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::player::StopRequest, ::player::StopReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Stop_, context, request, response);
}

void Player::Stub::async::Stop(::grpc::ClientContext* context, const ::player::StopRequest* request, ::player::StopReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::player::StopRequest, ::player::StopReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, std::move(f));
}

void Player::Stub::async::Stop(::grpc::ClientContext* context, const ::player::StopRequest* request, ::player::StopReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::player::StopReply>* Player::Stub::PrepareAsyncStopRaw(::grpc::ClientContext* context, const ::player::StopRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::player::StopReply, ::player::StopRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Stop_, context, request);
}

::grpc::ClientAsyncResponseReader< ::player::StopReply>* Player::Stub::AsyncStopRaw(::grpc::ClientContext* context, const ::player::StopRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStopRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Player::Stub::Close(::grpc::ClientContext* context, const ::player::CloseRequest& request, ::player::CloseReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::player::CloseRequest, ::player::CloseReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Close_, context, request, response);
}

void Player::Stub::async::Close(::grpc::ClientContext* context, const ::player::CloseRequest* request, ::player::CloseReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::player::CloseRequest, ::player::CloseReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Close_, context, request, response, std::move(f));
}

void Player::Stub::async::Close(::grpc::ClientContext* context, const ::player::CloseRequest* request, ::player::CloseReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Close_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::player::CloseReply>* Player::Stub::PrepareAsyncCloseRaw(::grpc::ClientContext* context, const ::player::CloseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::player::CloseReply, ::player::CloseRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Close_, context, request);
}

::grpc::ClientAsyncResponseReader< ::player::CloseReply>* Player::Stub::AsyncCloseRaw(::grpc::ClientContext* context, const ::player::CloseRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCloseRaw(context, request, cq);
  result->StartCall();
  return result;
}

Player::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Player_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Player::Service, ::player::OpenRequest, ::player::OpenReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Player::Service* service,
             ::grpc::ServerContext* ctx,
             const ::player::OpenRequest* req,
             ::player::OpenReply* resp) {
               return service->Open(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Player_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Player::Service, ::player::SetupForStreamingRequest, ::player::SetupForStreamingReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Player::Service* service,
             ::grpc::ServerContext* ctx,
             const ::player::SetupForStreamingRequest* req,
             ::player::SetupForStreamingReply* resp) {
               return service->SetupForStreaming(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Player_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Player::Service, ::player::ProcessTitleRequest, ::player::ProcessTitleReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Player::Service* service,
             ::grpc::ServerContext* ctx,
             const ::player::ProcessTitleRequest* req,
             ::player::ProcessTitleReply* resp) {
               return service->ProcessTitle(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Player_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Player::Service, ::player::GetLinkRequest, ::player::GetLinkReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Player::Service* service,
             ::grpc::ServerContext* ctx,
             const ::player::GetLinkRequest* req,
             ::player::GetLinkReply* resp) {
               return service->GetLink(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Player_method_names[4],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Player::Service, ::player::EndChanRequest, ::player::EndChanReply>(
          [](Player::Service* service,
             ::grpc::ServerContext* ctx,
             const ::player::EndChanRequest* req,
             ::grpc::ServerWriter<::player::EndChanReply>* writer) {
               return service->EndChan(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Player_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Player::Service, ::player::IsEndedRequest, ::player::IsEndedReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Player::Service* service,
             ::grpc::ServerContext* ctx,
             const ::player::IsEndedRequest* req,
             ::player::IsEndedReply* resp) {
               return service->IsEnded(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Player_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Player::Service, ::player::GetPositionRequest, ::player::GetPositionReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Player::Service* service,
             ::grpc::ServerContext* ctx,
             const ::player::GetPositionRequest* req,
             ::player::GetPositionReply* resp) {
               return service->GetPosition(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Player_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Player::Service, ::player::GetLengthRequest, ::player::GetLengthReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Player::Service* service,
             ::grpc::ServerContext* ctx,
             const ::player::GetLengthRequest* req,
             ::player::GetLengthReply* resp) {
               return service->GetLength(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Player_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Player::Service, ::player::GetSpeedRequest, ::player::GetSpeedReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Player::Service* service,
             ::grpc::ServerContext* ctx,
             const ::player::GetSpeedRequest* req,
             ::player::GetSpeedReply* resp) {
               return service->GetSpeed(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Player_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Player::Service, ::player::SetSpeedRequest, ::player::SetSpeedReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Player::Service* service,
             ::grpc::ServerContext* ctx,
             const ::player::SetSpeedRequest* req,
             ::player::SetSpeedReply* resp) {
               return service->SetSpeed(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Player_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Player::Service, ::player::GetPauseRequest, ::player::GetPauseReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Player::Service* service,
             ::grpc::ServerContext* ctx,
             const ::player::GetPauseRequest* req,
             ::player::GetPauseReply* resp) {
               return service->GetPause(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Player_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Player::Service, ::player::SetPauseRequest, ::player::SetPauseReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Player::Service* service,
             ::grpc::ServerContext* ctx,
             const ::player::SetPauseRequest* req,
             ::player::SetPauseReply* resp) {
               return service->SetPause(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Player_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Player::Service, ::player::SeekRequest, ::player::SeekReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Player::Service* service,
             ::grpc::ServerContext* ctx,
             const ::player::SeekRequest* req,
             ::player::SeekReply* resp) {
               return service->Seek(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Player_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Player::Service, ::player::GetVideoTracksRequest, ::player::GetVideoTracksReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Player::Service* service,
             ::grpc::ServerContext* ctx,
             const ::player::GetVideoTracksRequest* req,
             ::player::GetVideoTracksReply* resp) {
               return service->GetVideoTracks(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Player_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Player::Service, ::player::GetAudioTracksRequest, ::player::GetAudioTracksReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Player::Service* service,
             ::grpc::ServerContext* ctx,
             const ::player::GetAudioTracksRequest* req,
             ::player::GetAudioTracksReply* resp) {
               return service->GetAudioTracks(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Player_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Player::Service, ::player::GetSubtitlesTracksRequest, ::player::GetSubtitlesTracksReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Player::Service* service,
             ::grpc::ServerContext* ctx,
             const ::player::GetSubtitlesTracksRequest* req,
             ::player::GetSubtitlesTracksReply* resp) {
               return service->GetSubtitlesTracks(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Player_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Player::Service, ::player::SetVideoTrackRequest, ::player::SetVideoTrackReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Player::Service* service,
             ::grpc::ServerContext* ctx,
             const ::player::SetVideoTrackRequest* req,
             ::player::SetVideoTrackReply* resp) {
               return service->SetVideoTrack(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Player_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Player::Service, ::player::SetAudioTrackRequest, ::player::SetAudioTrackReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Player::Service* service,
             ::grpc::ServerContext* ctx,
             const ::player::SetAudioTrackRequest* req,
             ::player::SetAudioTrackReply* resp) {
               return service->SetAudioTrack(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Player_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Player::Service, ::player::SetSubtitlesTrackRequest, ::player::SetSubtitlesTrackReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Player::Service* service,
             ::grpc::ServerContext* ctx,
             const ::player::SetSubtitlesTrackRequest* req,
             ::player::SetSubtitlesTrackReply* resp) {
               return service->SetSubtitlesTrack(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Player_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Player::Service, ::player::StopRequest, ::player::StopReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Player::Service* service,
             ::grpc::ServerContext* ctx,
             const ::player::StopRequest* req,
             ::player::StopReply* resp) {
               return service->Stop(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Player_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Player::Service, ::player::CloseRequest, ::player::CloseReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Player::Service* service,
             ::grpc::ServerContext* ctx,
             const ::player::CloseRequest* req,
             ::player::CloseReply* resp) {
               return service->Close(ctx, req, resp);
             }, this)));
}

Player::Service::~Service() {
}

::grpc::Status Player::Service::Open(::grpc::ServerContext* context, const ::player::OpenRequest* request, ::player::OpenReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Player::Service::SetupForStreaming(::grpc::ServerContext* context, const ::player::SetupForStreamingRequest* request, ::player::SetupForStreamingReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Player::Service::ProcessTitle(::grpc::ServerContext* context, const ::player::ProcessTitleRequest* request, ::player::ProcessTitleReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Player::Service::GetLink(::grpc::ServerContext* context, const ::player::GetLinkRequest* request, ::player::GetLinkReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Player::Service::EndChan(::grpc::ServerContext* context, const ::player::EndChanRequest* request, ::grpc::ServerWriter< ::player::EndChanReply>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Player::Service::IsEnded(::grpc::ServerContext* context, const ::player::IsEndedRequest* request, ::player::IsEndedReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Player::Service::GetPosition(::grpc::ServerContext* context, const ::player::GetPositionRequest* request, ::player::GetPositionReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Player::Service::GetLength(::grpc::ServerContext* context, const ::player::GetLengthRequest* request, ::player::GetLengthReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Player::Service::GetSpeed(::grpc::ServerContext* context, const ::player::GetSpeedRequest* request, ::player::GetSpeedReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Player::Service::SetSpeed(::grpc::ServerContext* context, const ::player::SetSpeedRequest* request, ::player::SetSpeedReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Player::Service::GetPause(::grpc::ServerContext* context, const ::player::GetPauseRequest* request, ::player::GetPauseReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Player::Service::SetPause(::grpc::ServerContext* context, const ::player::SetPauseRequest* request, ::player::SetPauseReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Player::Service::Seek(::grpc::ServerContext* context, const ::player::SeekRequest* request, ::player::SeekReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Player::Service::GetVideoTracks(::grpc::ServerContext* context, const ::player::GetVideoTracksRequest* request, ::player::GetVideoTracksReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Player::Service::GetAudioTracks(::grpc::ServerContext* context, const ::player::GetAudioTracksRequest* request, ::player::GetAudioTracksReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Player::Service::GetSubtitlesTracks(::grpc::ServerContext* context, const ::player::GetSubtitlesTracksRequest* request, ::player::GetSubtitlesTracksReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Player::Service::SetVideoTrack(::grpc::ServerContext* context, const ::player::SetVideoTrackRequest* request, ::player::SetVideoTrackReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Player::Service::SetAudioTrack(::grpc::ServerContext* context, const ::player::SetAudioTrackRequest* request, ::player::SetAudioTrackReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Player::Service::SetSubtitlesTrack(::grpc::ServerContext* context, const ::player::SetSubtitlesTrackRequest* request, ::player::SetSubtitlesTrackReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Player::Service::Stop(::grpc::ServerContext* context, const ::player::StopRequest* request, ::player::StopReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Player::Service::Close(::grpc::ServerContext* context, const ::player::CloseRequest* request, ::player::CloseReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace player

